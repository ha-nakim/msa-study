pipeline {
    agent any
    environment {
        REGISTRY = "k8s-vga-worker1:5000"
        IMAGE_NAME = "group1-team7-accounts-hn"
        IMAGE_TAG = "latest"
        NAMESPACE = "group1-team7"
        JAVA_HOME = "/usr/local/java21"
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }
    stages {
        stage('Check Java Version') {
            steps {
                sh 'echo $JAVA_HOME'
                sh 'java -version'
            }
        }
        stage('Checkout') {
            steps {
              script {
                  checkout([
                      $class: 'GitSCM',
                      branches: [[name: '*/main']],  
                      extensions: [[$class: 'SparseCheckoutPaths', paths: ['accounts']]], 
                      userRemoteConfigs: [[url: 'https://github.com/ha-nakim/msa-study.git']]
                  ])
              }
            }
        }
        stage('Build with Gradle') {
            steps {
              dir('accounts') {
                script {
                    // Gradle 실행권한
                    // sh 'chmod +x ./gradlew'
                    // Gradle 빌드 실행
                    // sh './gradlew clean build'
                    // Maven 빌드 실행 (위 두줄 주석처리 및 아래 한줄 주석해제)
                    sh 'mvn clean package -DskipTests'
                }
              }
            }
        }
        stage('Build Docker Image') {
            steps {
              dir('accounts') {
                script {
                    sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ."
                }
              }
            }
        }
        stage('Push Docker Image') {
            steps {
              dir('accounts') {
                script {
                    // Docker 이미지를 Registry Server에 푸시
                    sh "docker push ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
              }
            }
        }
        stage('Deploy and Service to Kubernetes') {
            steps {
              dir('accounts') {
                script {
                    // Kubernetes Deployment and Service 생성 및 적용 (1일차 교육때 사용한 deploy & service 생성 yaml 파일 등록하여 사용)
                    sh "kubectl delete -f ./yaml/accounts.yaml -n ${NAMESPACE}"
                    sh "kubectl apply -f ./yaml/accounts.yaml -n ${NAMESPACE}"
                }
              }
            }
        }
        stage('Deployment Image to Update') {
            steps {
                script {
                    // Kubenetes에서 특정 Deployment의 컨테이너 이미지를 업데이트 (아래 이름은 중복되지 않게 주의하여 지정, deployment, selector 이름으로)
                    sh "kubectl set image deployment.apps/accounts-hn accounts-hn=${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} --namespace=${NAMESPACE}"
                }
            }
        }
    }
}
